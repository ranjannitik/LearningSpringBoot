package com.example.demo.model;
import jakarta.persistence.Column; // For column mapping 
import jakarta.persistence.Entity; // To mark as a JPA entity 
import jakarta.persistence.GeneratedValue; // For ID generation strategy 
import jakarta.persistence.GenerationType; // For ID generation strategy types 
import jakarta.persistence.Id; // To mark primary key 
import jakarta.persistence.Table; // To specify table name 


@Entity // Marks this class as a JPA entity 
@Table(name = "PRODUCTS") // Maps this entity to the "PRODUCTS" table in the database 
public class Product { 
 @Id // Designates 'id' as the primary key 
 // For Oracle 12c+ with GENERATED BY DEFAULT ON NULL AS IDENTITY, GenerationType.IDENTITY works. 
 // For older Oracle or sequence-based IDs, you would use GenerationType.SEQUENCE 
 // with @SequenceGenerator. 
 @GeneratedValue(strategy = GenerationType.IDENTITY) 
 private Long id; 
 @Column(name = "NAME", nullable = false, length = 255) // Maps to 'NAME' column, not null, max length 255 
 private String name; 
 @Column(name = "PRICE", nullable = false) // Maps to 'PRICE' column, not null 
 private double price; 
 // Constructors (keep existing ones) 
 public Product() {} 
 public Product(String name, double price) { // Constructor without ID for new products 
 this.name = name; 
 this.price = price; 
 } 
 // Getters and Setters (keep existing ones) 
 public Long getId() { return id; } 
 public void setId(Long id) { this.id = id; } 
 public String getName() { return name; } 
 public void setName(String name) { this.name = name; } 
 public double getPrice() { return price; } 
 public void setPrice(double price) { this.price = price; } 
 @Override 
 public String toString() { 
 return "Product{id=" + id + ", name='" + name + "', price=" + price + '}'; 
 } 
} 